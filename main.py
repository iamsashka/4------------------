from web3 import Web3
from web3.middleware import geth_poa_middleware
from contract_info import abi, contract_address
import re

w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:8545'))
w3.middleware_onion.inject(geth_poa_middleware, layer=0)
contract = w3.eth.contract(address=contract_address, abi=abi)

def login():
    try:
        public_key = input("–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:")
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª:")
        w3.geth.personal.unlock_account(public_key, password)
        return public_key
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ : {ex}")
        return None

def register():
    proverka = False
    while(proverka != True):
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        if len(password) >= 12:
            if bool(re.search('[!"#$%&\'()*+,-./:;<=>?@[\]^_{|}~]', password)):
                if bool(re.search('[0-9]', password)):
                    if bool(re.search('[A-Z]', password)):
                        account = w3.geth.personal.new_account(password)
                        print(f"–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {account}")
                        proverka = True
                    else:
                        print("–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤")
                else:
                    print("–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä")
            else:
                print("–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("–ü–∞—Ä–æ–ª—å –º–µ–Ω—å—à–µ 12 —Å–∏–º–≤–æ–ª–æ–≤")

def pay(account):
    try:
        value = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–æ–≤ —ç—Ñ–∏—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–æ—Ç—Ä–∞–∫—Ç: "))
        tx_hash = contract.functions.pay().transact({
            'from': account,
            'value': value,
        })
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash.hex()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as ex:
        print(f"–û—à–∏—å–∫–∞ : {ex}")

def get_balance(account):
    balanc = contract.functions.GetBalance().call({
        "from": account,
    })
    print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balanc}")

def withdraw(account):
    try:
        amount = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–æ–≤ —ç—Ñ–∏—Ä –¥–ª—è —Å–Ω—è—Ç–∏—è"))
        tx_hash = contract.functions.Withdraw(amount).transact({
            'from': account,
        })
        print(f"–¢—Ä–∞–Ω—Å–∞–∫—Ü–∏—è {tx_hash.hex()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤: {ex}")

def create_Estate(account):
    try:
        while(True):
            try:
                size = int(input("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∂–∏–ª—å—è: "))
                break
            except:
                print("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æüôÑ")
        print("1. House")
        print("2. Flat")
        print("3. Loft")
        typeEs = viborFunc(3)
        estateAdres = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –ø—ç–∂ ü•∫: ")
        tx_hash = contract.functions.createEstate(size, estateAdres, typeEs-1).transact({
            'from': account,
        })
        print(f"–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å {tx_hash.hex()} —Å–æ–∑–¥–∞–ª–∞—Å—å")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {ex}")

def get_esates(account):
    estates = contract.functions.GetEstates().call({
        "from": account,
    })
    i = 1
    for es in estates:
        if(es[4] != False):
            print(f"{i}: {es}")
            i = i + 1

def create_ad(account):
    estates = contract.functions.GetEstates().call({
        "from": account,
    })
    i = 1
    for es in estates:
        if (es[4] != False):
            print(f"{i}: {es}")
            i = i + 1
    nomerEsatate = viborFunc(i)
    while(True):
        try:
            price = int(input("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É: "))
            break
        except:
            print("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æüôÑ")
    try:
        tx_hash = contract.functions.createAd(nomerEsatate - 1, price).transact({
            'from': account,
        })
        print(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {tx_hash.hex()} —Å–æ–∑–¥–∞–ª–æ—Å—å")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞: {ex}")

def get_ads(account):
    ads = contract.functions.GetAds().call({
        "from": account,
    })
    i = 1
    for ad in ads:
        if(ad[5] != 1):
            print(f"{i}: {ad}")
            i = i + 1

def update_ad_status(account):
    ads = contract.functions.GetAds().call({
        "from": account,
    })
    i = 1
    for ad in ads:
        if (ad[5] != 1):
            print(f"{i}: {ad}")
            i = i + 1
    nomerAd = viborFunc(i)
    try:
        tx_hash = contract.functions.updateAdStatus(nomerAd - 1).transact({
            'from': account,
        })
        print(f"–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è {tx_hash.hex()} –∏–∑–º–µ–Ω—ë–Ω")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞: {ex}")

def update_estate_status(account):
    estates = contract.functions.GetEstates().call({
        "from": account,
    })
    i = 1
    for es in estates:
        print(f"{i}: {es}")
        i = i + 1
    nomerEs = viborFunc(i)
    print("1. –û—Ç–∫—Ä—ã—Ç—å")
    print("2. –ó–∞–∫—Ä—ã—Ç—å")
    vibor = viborFunc(2)
    isActiv = bool
    if vibor == 1:
        isActiv = True
    elif vibor == 2:
        isActiv = False
    try:
        tx_hash = contract.functions.updateEstateStatus(nomerEs - 1, isActiv).transact({
            'from': account,
        })
        print(f"–°—Ç–∞—Ç—É—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ {tx_hash.hex()} –∏–∑–º–µ–Ω—ë–Ω")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞: {ex}")

def buy_estate(account):
    ads = contract.functions.GetAds().call({
        "from": account,
    })
    i = 1
    for ad in ads:
        if (ad[5] != 1):
            print(f"{i}: {ad}")
            i = i + 1
    nomerAd = viborFunc(i)
    try:
        tx_hash = contract.functions.BuyEstate(nomerAd - 1).transact({
            'from': account,
        })
        print(f"–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å {tx_hash.hex()} –∫—É–ø–ª–µ–Ω–∞")
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞: {ex}")

def viborFunc(i):
    while (True):
        try:
            nomer = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ: "))
            if nomer > i:
                raise ValueError
            break
        except:
            print("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µüôÑ")
    return nomer

def main():
    account = ""
    while True:
        if account == "" or account == None:
            while True:
                try:
                    chouce = int(input("–í—ã–±–µ—Ä–∏—Ç–µ\n1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n3.–í—ã–π—Ç–∏\n"))
                    break
                except:
                    print("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æüôÑ")
            match chouce:
                case 1:
                    account = login()
                case 2:
                    register()
                case 3:
                    exit()
                case _:
                    print("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 2")
        else:
            while True:
                try:
                    chouce = int(input("–í—ã–±–µ—Ä–∏—Ç–µ\n1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ñ–∏—Ä\n2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\n3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n4. –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n5. –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å\n6. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å\n7. –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n8. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n9. –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n10. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n11. –ö—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å\n12. –í—ã–π—Ç–∏\n"))
                    break
                except:
                    print("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æüôÑ")
            match chouce:
                case 1:
                    pay(account)
                case 2:
                    get_balance(account)
                case 3:
                    print(f"–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞–Ω—É—Ç–∞: {w3.eth.get_balance(account)}")
                case 4:
                    withdraw(account)
                case 5:
                    create_Estate(account)
                case 6:
                    get_esates(account)
                case 7:
                    create_ad(account)
                case 8:
                    get_ads(account)
                case 9:
                    update_ad_status(account)
                case 10:
                    update_estate_status(account)
                case 11:
                    buy_estate(account)
                case 12:
                    account = ""
                case _:
                    print("–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µü•≤ü•≤")

if __name__ == "__main__":
    main()